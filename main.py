import requests
import os
import time
from datetime import datetime

TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID")
USGS_API_URL = "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson"
SEISMIC_PORTAL_API_URL = "https://www.seismicportal.eu/fdsnws/event/1/query?limit=10&format=json&minmag=1.9"

def send_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "Markdown"}
    requests.post(url, json=payload)

def get_usgs_earthquake_data():
    try:
        response = requests.get(USGS_API_URL)
        return response.json()['features']
    except:
        print("Can't connect to "+ USGS_API_URL)

def get_seismic_portal_earthquake_data():
    try:
        response = requests.get(SEISMIC_PORTAL_API_URL)
        return response.json()['features']
    except:
        print("Can't connect to "+ SEISMIC_PORTAL_API_URL)

def send_info_about_eq(magnitude,tsunami,location,readable_time,latitude,longitude):
            if magnitude > 3.9:
                earthquake_color = "🟡"
                if magnitude > 4.9:
                    earthquake_color = "🟠"
                if magnitude > 5.9:
                    earthquake_color = "🔴"
                text = f"Earthquake alert:\n 📈 Magnitude: {magnitude} {earthquake_color}\n 📍 Location: {location}\n 🕒 Time: {readable_time}\n 🗺️ [Link to GoogleMaps](https://www.google.com/maps/search/?api=1&query={latitude},{longitude})"
                if tsunami > 0:
                    text += "\n ⚠️ Tsunami alert: A tsunami was generated by this earthquake."
                send_message(text)

#You can modify this function to run custom process on the message
latest_earthquake_time = 1676624086962
latest_seismic_portal_time = 1676624086962
while True:
    try:
        earthquake_data = get_usgs_earthquake_data()
        earthquake_data = sorted(earthquake_data, key=lambda x: x['properties']['time'], reverse=False)
    
        for earthquake in earthquake_data:
            magnitude = earthquake['properties']['mag']
            try:
                location = earthquake['properties']['place']
            except:
                location = earthquake['properties']['flynn_region']
            latitude = earthquake['geometry']['coordinates'][1]
            longitude = earthquake['geometry']['coordinates'][0]
            earthquake_time = earthquake['properties']['time']
            try:
                tsunami = earthquake['properties']['tsunami']
            except:
                tsunami = 0
            try:    
                readable_time = datetime.fromtimestamp(earthquake_time / 1000.0).strftime('%Y-%m-%d %H:%M:%S')
            except:
                readable_time = earthquake_time
                time_format = "%Y-%m-%dT%H:%M:%S.%fZ"
                earthquake_time = datetime.strptime(earthquake_time, time_format)
                earthquake_time = int(earthquake_time.timestamp() * 1000)
        
            if earthquake_time > latest_earthquake_time:
                latest_earthquake_time = earthquake_time
                send_info_about_eq(magnitude, tsunami,location,readable_time,latitude,longitude)
    except:
        print("can't get data from usgs")
    
    try:    
        seismic_portal_data = get_seismic_portal_earthquake_data()
        seismic_portal_data = sorted(seismic_portal_data, key=lambda x: x['properties']['time'], reverse=False)
        for earthquake in seismic_portal_data:
            magnitude = earthquake['properties']['mag']
            try:
                location = earthquake['properties']['place']
            except:
                location = earthquake['properties']['flynn_region']
            latitude = earthquake['geometry']['coordinates'][1]
            longitude = earthquake['geometry']['coordinates'][0]
            earthquake_time = earthquake['properties']['time']
            try:
                tsunami = earthquake['properties']['tsunami']
            except:
                tsunami = 0
            try:    
                readable_time = datetime.fromtimestamp(earthquake_time / 1000.0).strftime('%Y-%m-%d %H:%M:%S')
            except:
                readable_time = earthquake_time
                time_format = "%Y-%m-%dT%H:%M:%S.%fZ"
                earthquake_time = datetime.strptime(earthquake_time, time_format)
                earthquake_time = int(earthquake_time.timestamp() * 1000)
        
            if earthquake_time > latest_seismic_portal_time:
                latest_seismic_portal_time = earthquake_time
                send_info_about_eq(magnitude, tsunami,location,readable_time,latitude,longitude)
    except:
        print("can't get data from seismic portal")
    time.sleep(60)